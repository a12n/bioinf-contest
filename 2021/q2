#!/usr/bin/env python3

from decimal import Decimal
from sys import stdin, stderr

def nearest(products, signal, region=None):
    if region == None:
        region = (0, len(products))
    if not (region[0] < region[1]):
        return None
    cur = region[0] + (region[1] - region[0]) // 2
    # print("region", region, "cur", cur, file=stderr)
    best = cur
    if signal < products[cur][0]:
        best_left = nearest(products, signal, region=(region[0], cur))
        best_right = cur + 1 if cur < (region[1] - 1) else None
    else:
        best_left = cur - 1 if cur > region[0] else None
        best_right = nearest(products, signal, region=(cur + 1, region[1]))
    cands = []
    cands.append( (abs(products[cur][0] - signal), cur) )
    if best_left != None:
        cands.append( (abs(products[best_left][0] - signal), best_left) )
    if best_right != None:
        cands.append( (abs(products[best_right][0] - signal), best_right) )
    return min(cands)[1]

def nearest2(metabolites, metabolites_index,
             adducts, adducts_index,
             signal,
             metabolites_range=None, adducts_range=None,
             ans=None):
    if metabolites_range == None:
        metabolites_range = (0, len(metabolites))
    if adducts_range == None:
        adducts_range = (0, len(adducts))
    if metabolites_range[0] >= metabolites_range[1] or \
       adducts_range[0] >= adducts_range[1]:
        # Empty range
        return ans
    # TODO
    return ans

test_num = int(stdin.readline())
for test_i in range(test_num):
    m, k, n = map(int, stdin.readline().split())
    print("m", m, "k", k, "n", n, file=stderr)
    metabolites = list(map(Decimal, stdin.readline().split()))
    # metabolites_index = sorted(range(len(metabolites)), key=lambda i: metabolites[i])
    print("metabolites", metabolites, file=stderr)
    # print("metabolites_index", metabolites_index, file=stderr)
    adducts = list(map(Decimal, stdin.readline().split()))
    # adducts_index = sorted(range(len(adducts)), key=lambda i: adducts[i])
    print("adducts", adducts, file=stderr)
    # print("adducts_index", adducts_index, file=stderr)
    try:
        products = dict()
        for (i, m_i) in enumerate(metabolites, start=1):
            print(i, "/", m, "products", len(products), file=stderr)
            for (j, a_j) in enumerate(adducts, start=1):
                s = m_i + a_j
                if s > 0:
                    products[s] = (i, j)
        del(metabolites)
        del(adducts)
        products = sorted(products.items())
    except MemoryError:
        print("MemoryError", file=stderr)
        products = [(Decimal(0), (1, 1))]
    print("products", len(products), file=stderr)
    for signal in map(Decimal, stdin.readline().split()):
        print("signal", signal, file=stderr)
        _, ans = products[nearest(products, signal)]
        print(ans[0], ans[1])
