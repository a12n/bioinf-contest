#!/usr/bin/env python3

from decimal import Decimal
from sys import stdin, stderr

def nearest(ps, q, region=None):
    if region == None:
        region = (0, len(ps))
    if not (region[0] < region[1]):
        return None
    cur = region[0] + (region[1] - region[0]) // 2
    # print("region", region, "cur", cur, file=stderr)
    best = cur
    if q < ps[cur][0]:
        best_left = nearest(ps, q, region=(region[0], cur))
        best_right = cur + 1 if cur < (region[1] - 1) else None
    else:
        best_left = cur - 1 if cur > region[0] else None
        best_right = nearest(ps, q, region=(cur + 1, region[1]))
    cands = []
    cands.append( (abs(ps[cur][0] - q), cur) )
    if best_left != None:
        cands.append( (abs(ps[best_left][0] - q), best_left) )
    if best_right != None:
        cands.append( (abs(ps[best_right][0] - q), best_right) )
    return min(cands)[1]

t = int(stdin.readline())
for t_i in range(t):
    m, k, n = map(int, stdin.readline().split())
    # print("m", m, "k", k, "n", n, file=stderr)
    metabolites = list(map(Decimal, stdin.readline().split()))
    # print("metabolites", metabolites, file=stderr)
    adducts = list(map(Decimal, stdin.readline().split()))
    # print("adducts", adducts, file=stderr)
    products = []
    for (i, m_i) in enumerate(metabolites, start=1):
        print("test(", t_i + 1, "/", t, ")", "build", "metabolite(", i, "/", m, ")", file=stderr)
        for (j, a_j) in enumerate(adducts, start=1):
            products.append((m_i + a_j, i, j))
    products.sort()
    # print("products", products, file=stderr)
    del(metabolites)
    del(adducts)
    for (i, s_i) in enumerate(map(Decimal, stdin.readline().split()), start=1):
        print("test(", t_i + 1, "/", t, ")", "query", "signal(", i, "/", n, ")", file=stderr)
        best = nearest(products, s_i)
        print(products[best][1], products[best][2])
