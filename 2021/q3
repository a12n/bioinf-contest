#!/usr/bin/env python3

from collections import deque
from decimal import Decimal
from sys import stdin, stdout, stderr
import math
import os.path

#######################
# Read phenotype tree #
#######################

ROOT = 0

n = int(stdin.readline())
print("n", n, file=stderr)
parent = [None] + list(map(lambda p: int(p) - 1, stdin.readline().split()))
ic = list(map(int, stdin.readline().split()))

children = [set() for _ in range(n)]
for u in range(n):
    if parent[u] != None:
        children[parent[u]].add(u)
print("children", children, file=stderr)

assert(len(parent) == n)
assert(len(ic) == n)

print("parent", len(parent) if len(parent) > 100 else parent, file=stderr)
print("ic", len(ic) if len(ic) > 100 else ic, file=stderr)

#################
# Read diseases #
#################

m = int(stdin.readline())
diseases = []
for _ in range(m):
    cm_i = list(map(int, stdin.readline().split()))
    assert(len(cm_i) - 1 == cm_i[0])
    diseases.append(set(map(lambda d: d - 1, cm_i[1:])))

assert(len(diseases) == m)

print("diseases", len(diseases) if len(diseases) > 100 else diseases, file=stderr)

print("pp", "disease presence", "begin", file=stderr)
presence = dict()

def addpresence(u, j):
    # TODO: binary search
    ranges = presence.setdefault(u, [])
    len1 = len(ranges)
    ranges.append((j, j))
    ranges.sort()
    for i in range(1, len(ranges)):
        if ranges[i][0] <= (ranges[i - 1][1] + 1):
            ranges[i] = (ranges[i - 1][0], max(ranges[i - 1][1], ranges[i][1]))
            ranges[i - 1] = None
    ranges[:] = list(filter(lambda r: r != None, ranges))
    len2 = len(ranges)
    if len2 != len1:
        print("addpresence", len1, "->", len2, file=stderr)

def querypresence(u):
    # return presence.get(u, set())
    for r in presence.get(u, []):
        for v in range(r[0], r[1] + 1):
            yield v

for (j, disease) in enumerate(diseases):
    print("pp", "disease presence", j + 1, "/", len(diseases), file=stderr)
    for d in disease:
        while d != None:
            # presence.setdefault(d, set()).add(j)
            addpresence(d, j)
            # TODO: set of ranges (d1, d2) instead of individual vertices?
            # TODO: universal set at the root, each child keeps set of
            # vertices to remove from it's parent set to get set of
            # diseases at the vertex?
            d = parent[d]
print("pp", "disease presence", "end", file=stderr)
print("presence", presence, file=stderr)

#################
# Read patients #
#################

nq = int(stdin.readline())
patients = []
for _ in range(nq):
    cq_i = list(map(int, stdin.readline().split()))
    assert(len(cq_i) - 1 == cq_i[0])
    patients.append(set(map(lambda q: q - 1, cq_i[1:])))

assert(len(patients) == nq)
del(nq)

print("patients", len(patients) if len(patients) > 100 else patients, file=stderr)

########
# Main #
########

def search(u):
    ans = dict()
    seen = set()
    # print("search", "u", u, file=stderr)
    while u != None and len(ans) == 0:
        # print("u", u, file=stderr)
        queue = deque()
        queue.append(u)
        while queue:
            v = queue.pop()
            # print("queue", queue, "v", v, file=stderr)
            if v in seen:
                # print("v", v, "in seen", file=stderr)
                continue
            seen.add(v)
            for j in querypresence(v):
                # print("ans", "add", j, file=stderr)
                ans[j] = max(ans.get(j, 0), ic[u])
            queue.extend(children[v])
        u = parent[u]
    return ans

for (i, patient) in enumerate(patients):
    print("patient", i + 1, "/", len(patients), file=stderr)
    if os.path.isfile("/tmp/__done__"):
        print(1)
        continue
    candidates = dict()
    for q in patient:
        seen = set()
        done = False
        while q != None and not done:
            for j in querypresence(q):
                if j not in seen:
                    candidates[j] = candidates.get(j, 0) + ic[q]
                    seen.add(j)
                done = True
            q = parent[q]
    # print("candidates", candidates, file=stderr)
    best = max(candidates.items(), key=lambda e: e[1])
    # print("best", best, file=stderr)
    print(best[0] + 1)
