#!/usr/bin/env python3

from decimal import Decimal
from sys import stdin, stdout, stderr
import math
import os.path

#######################
# Read phenotype tree #
#######################

ROOT = 0

n = int(stdin.readline())
print("n", n, file=stderr)
parent = [None] + list(map(lambda p: int(p) - 1, stdin.readline().split()))
ic = list(map(int, stdin.readline().split()))

assert(len(parent) == n)
assert(len(ic) == n)

print("parent", len(parent) if len(parent) > 100 else parent, file=stderr)
print("ic", len(ic) if len(ic) > 100 else ic, file=stderr)

#################
# Read diseases #
#################

m = int(stdin.readline())
diseases = []
for _ in range(m):
    cm_i = list(map(int, stdin.readline().split()))
    assert(len(cm_i) - 1 == cm_i[0])
    diseases.append(set(map(lambda d: d - 1, cm_i[1:])))

assert(len(diseases) == m)

print("diseases", len(diseases) if len(diseases) > 100 else diseases, file=stderr)

print("pp", "disease presence", "begin", file=stderr)
presence = dict()
for (j, disease) in enumerate(diseases):
    print("pp", "disease presence", j + 1, "/", len(diseases), file=stderr)
    for d in disease:
        while d != None:
            presence.setdefault(d, set()).add(j)
            # TODO: set of ranges (d1, d2) instead of individual vertices?
            d = parent[d]
print("pp", "disease presence", "end", file=stderr)
print("presence", presence, file=stderr)

#################
# Read patients #
#################

nq = int(stdin.readline())
patients = []
for _ in range(nq):
    cq_i = list(map(int, stdin.readline().split()))
    assert(len(cq_i) - 1 == cq_i[0])
    patients.append(set(map(lambda q: q - 1, cq_i[1:])))

assert(len(patients) == nq)
del(nq)

print("patients", len(patients) if len(patients) > 100 else patients, file=stderr)

########
# Main #
########

for (i, patient) in enumerate(patients):
    print("patient", i + 1, "/", len(patients), file=stderr)
    if os.path.isfile("/tmp/__done__"):
        print(1)
        continue
    candidates = dict()
    for q in patient:
        seen = set()
        while q != None:
            for j in presence.get(q, set()):
                if j not in seen:
                    candidates[j] = candidates.get(j, 0) + ic[q]
                    seen.add(j)
            q = parent[q]
    # print("candidates", candidates, file=stderr)
    best = max(candidates.items(), key=lambda e: e[1])
    # print("best", best, file=stderr)
    print(best[0] + 1)
