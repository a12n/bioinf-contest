#!/usr/bin/env python3

from decimal import Decimal
from sys import stdin, stdout, stderr

#######################
# Read phenotype tree #
#######################

ROOT = 0

n = int(stdin.readline())
parent = [None] + list(map(lambda x: int(x) - 1, stdin.readline().split()))
ic = list(map(int, stdin.readline().split()))

assert(len(parent) == n)
assert(len(ic) == n)
del(n)

print("parent", len(parent) if len(parent) > 100 else parent, file=stderr)
print("ic", len(ic) if len(ic) > 100 else ic, file=stderr)

def printdot(f=stdout):
    print("digraph {", file=f)
    for i in range(len(ic)):
        # print("{:d} [label=\"{:d} = {:d}\"];".format(i, i, ic[i]), file=f)
        print("{:d};".format(i), file=f)
    for i in range(len(parent)):
        if parent[i] != None:
            print("{:d} -> {:d};".format(parent[i], i), file=f)
    print("}", file=f)

def rootpath(u):
    ans = []
    while True:
        ans.append(u)
        if u == ROOT:
            break
        u = parent[u]
    return ans

def lca(u, v):
    ans = None
    u_path = rootpath(u)
    v_path = rootpath(v)
    while u_path and v_path:
        if u_path[-1] == v_path[-1]:
            ans = u_path.pop()
            v_path.pop()
        else:
            break
    return ans

# with open("/tmp/q3.dot", "w") as f:
#     printdot(f)

#################
# Read diseases #
#################

m = int(stdin.readline())
diseases = []
for _ in range(m):
    cm_i = list(map(int, stdin.readline().split()))
    assert(len(cm_i) - 1 == cm_i[0])
    diseases.append(list(map(lambda d: d - 1, cm_i[1:])))

assert(len(diseases) == m)
del(m)

print("diseases", len(diseases) if len(diseases) > 100 else diseases, file=stderr)

print("reordering vertices in diseases", file=stderr)
for disease in diseases:
    disease.sort(key=lambda d: ic[d], reverse=True)

#################
# Read patients #
#################

nq = int(stdin.readline())
patients = []
for _ in range(nq):
    cq_i = list(map(int, stdin.readline().split()))
    assert(len(cq_i) - 1 == cq_i[0])
    patients.append(list(map(lambda q: q - 1, cq_i[1:])))

assert(len(patients) == nq)
del(nq)

print("patients", len(patients) if len(patients) > 100 else patients, file=stderr)

########
# Main #
########

def infocontent(patient, disease):
    ans = 0
    for q in patient:
        max_lca_ic = ic[lca(q, disease[0])]
        for d in disease[1:]:
            if ic[d] < max_lca_ic:
                # LCA(q, d) can't be higher in the tree than d itself,
                # and IC(d) is already less than the already found
                # vertex in disease. Ignore rest of vertices in this
                # disease, since they are sorted in order of
                # decreasing IC(d).
                break
            max_lca_ic = max(max_lca_ic, ic[lca(q, d)])
        ans += max_lca_ic
    return ans

for (i, patient) in enumerate(patients, start=1):
    ans = None
    print("patient", i, "/", len(patients), file=stderr)
    for (j, disease) in enumerate(diseases, start=1):
        ic_j = infocontent(patient, disease)
        if ans == None or ic_j > ans[0]:
            ans = (ic_j, j)
    print(ans[1])
